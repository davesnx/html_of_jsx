let tag =
  test "tag" (fun () ->
      let div = <div /> in
      assert_string (JSX.render div) "<div></div>")

let empty_attribute =
  test "empty_attribute" (fun () ->
      let div = <div class_="" /> in
      assert_string (JSX.render div) "<div class=\"\"></div>")

let bool_attribute =
  test "bool_attribute" (fun () ->
      let div = <div hidden=true /> in
      assert_string (JSX.render div) {|<div hidden></div>|})

let bool_attributes =
  test "bool_attributes" (fun () ->
      let input =
        <input type_="checkbox" name="cheese" checked=true disabled=false />
      in
      assert_string (JSX.render input)
        {|<input type="checkbox" name="cheese" checked />|})

let innerhtml =
  test "innerhtml" (fun () ->
      let p = <p>(JSX.string "text")</p> in
      assert_string (JSX.render p) {|<p>text</p>|})

let int_attribute =
  test "int_attribute" (fun () ->
      let div = <div tabindex=1 /> in
      assert_string (JSX.render div) {|<div tabindex="1"></div>|})

let style_attribute =
  test "style_attribute" (fun () ->
      let div = <div style="background-color:gainsboro" /> in
      assert_string (JSX.render div)
        {|<div style="background-color:gainsboro"></div>|})

let link_as_attribute =
  test "link_as_attribute" (fun () ->
      let link =
        <link as_="image" rel="preload" href="https://sancho.dev/blog" />
      in
      assert_string (JSX.render link)
        {|<link as="image" rel="preload" href="https://sancho.dev/blog" />|})

let int_opt_attribute_some =
  test "int_opt_attribute_some" (fun () ->
      let tabindex = Some 1 in
      let div = <div ?tabindex /> in
      assert_string (JSX.render div) {|<div tabindex="1"></div>|})

let int_opt_attribute_none =
  test "int_opt_attribute_none" (fun () ->
      let tabindex = None in
      let div = <div ?tabindex /> in
      assert_string (JSX.render div) {|<div></div>|})

(* let lists_as_children =
   test "lists_as_children" (fun () ->
     let div = <> <div class_="md:w-1/3" /> <div class_="md:w-2/3" /> </> in
     assert_string(
       (JSX.render(div))
       {|<div class="md:w-1/3"></div><div class="md:w-2/3"></div>|}
     )) *)

module Container = struct
  let make ?children () =
    match children with Some child -> <div>child</div> | None -> JSX.null
end

let children_uppercase =
  test "children_uppercase" (fun () ->
      let component = <Container /> in
      assert_string (JSX.render component) "")

let children_uppercase_children_case_optional =
  test "children_uppercase_children_optional" (fun () ->
      let component = <Container><span /></Container> in
      assert_string (JSX.render component) {|<div><span></span></div>|})

let children_lowercase =
  test "children_lowercase" (fun () ->
      let component = <div><span /></div> in
      assert_string (JSX.render component) {|<div><span></span></div>|})

let string_opt_attribute_some =
  test "string_opt_attribute_some" (fun () ->
      let class_ = Some "foo" in
      let div = <div ?class_ /> in
      assert_string (JSX.render div) {|<div class="foo"></div>|})

let string_opt_attribute_none =
  test "string_opt_attribute_none" (fun () ->
      let class_ = None in
      let div = <div ?class_ /> in
      assert_string (JSX.render div) {|<div></div>|})

let bool_opt_attribute_some =
  test "bool_opt_attribute_some" (fun () ->
      let hidden = Some true in
      let div = <div ?hidden /> in
      assert_string (JSX.render div) {|<div hidden></div>|})

let bool_opt_attribute_none =
  test "bool_opt_attribute_none" (fun () ->
      let hidden = None in
      let div = <div ?hidden /> in
      assert_string (JSX.render div) {|<div></div>|})

let style_opt_attribute_some =
  test "style_opt_attribute_some" (fun () ->
      let style = Some "color: blue;" in
      let div = <div ?style /> in
      assert_string (JSX.render div) {|<div style="color: blue;"></div>|})

let style_opt_attribute_none =
  test "style_opt_attribute_none" (fun () ->
      let style = None in
      let div = <div ?style /> in
      assert_string (JSX.render div) {|<div></div>|})

let onclick_inline_string =
  test "onclick_inline_string" (fun () ->
      let onClick = "console.log('clicked')" in
      let div = <div onclick=onClick /> in
      assert_string (JSX.render div)
        {|<div onclick="console.log(&apos;clicked&apos;)"></div>|})

let svg =
  test "svg" (fun () ->
      assert_string
        (JSX.render
           <svg
             xmlns="http://www.w3.org/2000/svg"
             viewBox="0 0 24 24"
             width="24px"
             height="24px">
             <path
               d="M 5 3 C 3.9069372 3 3 3.9069372 3 5 L 3 19 C 3 20.093063 \
                  3.9069372 21 5 21 L 19 21 C 20.093063 21 21 20.093063 21 19 \
                  L 21 12 L 19 12 L 19 19 L 5 19 L 5 5 L 12 5 L 12 3 L 5 3 z M \
                  14 3 L 14 5 L 17.585938 5 L 8.2929688 14.292969 L 9.7070312 \
                  15.707031 L 19 6.4140625 L 19 10 L 21 10 L 21 3 L 14 3 z"
             />
           </svg>)
        {|<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24px" height="24px"><path d="M 5 3 C 3.9069372 3 3 3.9069372 3 5 L 3 19 C 3 20.093063 3.9069372 21 5 21 L 19 21 C 20.093063 21 21 20.093063 21 19 L 21 12 L 19 12 L 19 19 L 5 19 L 5 5 L 12 5 L 12 3 L 5 3 z M 14 3 L 14 5 L 17.585938 5 L 8.2929688 14.292969 L 9.7070312 15.707031 L 19 6.4140625 L 19 10 L 21 10 L 21 3 L 14 3 z"></path></svg>|})

module Component = struct
  let make ~(children : JSX.element) ~(_cosas : _) () = <div>children</div>
end

let children_one_element =
  test "children_one_element" (fun () ->
      assert_string
        (JSX.render <Component _cosas=true><span /></Component>)
        {|<div><span></span></div>|})

module Text = struct
  module Tag = struct
    type t = H1 | H2

    let unwrap = function H1 -> "h1" | H2 -> "h2"
  end

  let make ~tagType ~children () =
    JSX.node (tagType |> Tag.unwrap) [] [ children ]
end

let create_element_variadic =
  test "create_element_variadic" (fun () ->
      let component = <Text tagType=Text.Tag.H1>(JSX.string "Hello")</Text> in
      assert_string (JSX.render component) {|<h1>Hello</h1>|};
      let component = <Text tagType=Text.Tag.H2>(JSX.string "Hello")</Text> in
      assert_string (JSX.render component) {|<h2>Hello</h2>|})

let aria_props =
  test "aria_props" (fun () ->
      let component =
        <h1 aria_hidden=true aria_label="send email" aria_atomic=true>
          (JSX.string "Hello")
        </h1>
      in
      assert_string (JSX.render component)
        {|<h1 aria-hidden="true" aria-label="send email" aria-atomic="true">Hello</h1>|})

let lowercase_component =
  test "lowercase_component" (fun () ->
      let component ~text () = <h1>(JSX.string text)</h1> in

      assert_string (JSX.render <component text="Hello" />) {|<h1>Hello</h1>|})

let tests =
  ( "Test with mlx",
    [
      tag;
      empty_attribute;
      bool_attribute;
      bool_attributes;
      innerhtml;
      int_attribute;
      svg;
      style_attribute;
      link_as_attribute;
      int_opt_attribute_some;
      int_opt_attribute_none;
      string_opt_attribute_some;
      string_opt_attribute_none;
      bool_opt_attribute_some;
      bool_opt_attribute_none;
      style_opt_attribute_some;
      style_opt_attribute_none;
      children_uppercase;
      children_lowercase;
      onclick_inline_string;
      children_one_element;
      create_element_variadic;
      aria_props;
      lowercase_component;
    ] )
