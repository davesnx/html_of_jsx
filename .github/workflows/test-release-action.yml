name: Test Release Action

on:
  push:
    paths:
      - '.github/scripts/release/**'
      - '.github/workflows/test-release-action.yml'
  pull_request:
    paths:
      - '.github/scripts/release/**'
      - '.github/workflows/test-release-action.yml'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        type: boolean
        default: false

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: .github/scripts/release
        run: npm ci

      - name: Run tests
        working-directory: .github/scripts/release
        run: npm test

  integration-tests:
    name: Integration test - ${{ matrix.scenario.name }}
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      fail-fast: false
      matrix:
        scenario:
          # Happy path scenarios
          - name: "valid-release"
            description: "Test successful release flow"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              echo 'version: "0.1.0"' >> test-package.opam
              echo 'depends: ["ocaml" "dune"]' >> test-package.opam
              mkdir -p .github/scripts/release
              echo '## 0.1.0' > CHANGES.md
              echo '- Initial release' >> CHANGES.md
            inputs:
              package-name: test-package
              to-opam-repository: false
              to-github-releases: false
              verbose: true
            expect-success: true
            expect-outputs:
              - version: "0.1.0"

          - name: "dry-run"
            description: "Test dry-run mode (validation only)"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              echo '## 0.2.0' > CHANGES.md
              echo '- Test release' >> CHANGES.md
            inputs:
              package-name: test-package
              to-opam-repository: false
              to-github-releases: false
            expect-success: true

          # Error scenarios
          - name: "missing-changelog"
            description: "Test with missing CHANGES.md"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              rm -f CHANGES.md
            inputs:
              package-name: test-package
            expect-success: false
            expect-error: "changelog"

          - name: "invalid-opam"
            description: "Test with invalid opam file"
            setup: |
              echo 'invalid opam content' > test-package.opam
              echo '## 1.0.0' > CHANGES.md
              echo '- Release' >> CHANGES.md
            inputs:
              package-name: test-package
              to-opam-repository: false
              to-github-releases: false
            expect-success: false
            expect-error: "opam"

          - name: "missing-version-in-changelog"
            description: "Test when version not in CHANGES.md"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              echo '# Changelog' > CHANGES.md
              echo 'No version entries here' >> CHANGES.md
            inputs:
              package-name: test-package
              to-opam-repository: false
              to-github-releases: false
            expect-success: false
            expect-error: "version"

          - name: "custom-changelog-path"
            description: "Test with custom changelog file"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              echo '## 0.3.0' > NEWS.md
              echo '- Custom changelog' >> NEWS.md
            inputs:
              package-name: test-package
              changelog: ./NEWS.md
              to-opam-repository: false
              to-github-releases: false
            expect-success: true

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build the action
        working-directory: .github/scripts/release
        run: |
          npm ci
          npm run package

      - name: Create test environment
        run: |
          # Create a temporary test directory
          mkdir -p test-env
          cd test-env

          # Initialize git repo (needed for dune-release)
          git init
          git config user.name "Test User"
          git config user.email "test@example.com"

          # Run scenario setup
          ${{ matrix.scenario.setup }}

          # Create initial commit and tag (needed for release action)
          git add -A || true
          git commit -m "Initial test commit" || echo "No files to commit"
          git tag 0.1.0

          # Export GITHUB_REF for the entire job
          echo "GITHUB_REF=refs/tags/0.1.0" >> $GITHUB_ENV
          echo "GITHUB_REF_NAME=0.1.0" >> $GITHUB_ENV
          echo "GITHUB_REF_TYPE=tag" >> $GITHUB_ENV

          # Create a fake dune-release executable for testing
          mkdir -p ../.test-bin
          cat > ../.test-bin/dune-release << 'EOF'
          #!/bin/bash
          # Mock dune-release for testing
          case "$1" in
            lint)
              if [[ -f test-package.opam ]] && grep -q "opam-version" test-package.opam; then
                echo "Lint passed"
                exit 0
              else
                echo "Lint failed: invalid opam file"
                exit 1
              fi
              ;;
            distrib)
              echo "Creating distribution..."
              mkdir -p _build
              touch _build/test-package-0.1.0.tbz
              exit 0
              ;;
            *)
              echo "Mock dune-release: $@"
              exit 0
              ;;
          esac
          EOF
          chmod +x ../.test-bin/dune-release

          # Add mock to PATH
          echo "PATH=$PWD/../.test-bin:$PATH" >> $GITHUB_ENV

      - name: Setup OCaml (mock)
        run: |
          # Create mock opam for testing
          cat > $PWD/.test-bin/opam << 'EOF'
          #!/bin/bash
          echo "Mock opam: $@"
          exit 0
          EOF
          chmod +x $PWD/.test-bin/opam

      - name: Debug environment
        run: |
          echo "GITHUB_REF from workflow: $GITHUB_REF"
          echo "GitHub context ref: ${{ github.ref }}"
          echo "Setting GITHUB_REF for action..."

      - name: Run action
        id: test-action
        uses: ./.github/scripts/release
        with:
          github-token: ${{ github.token }}
          package-name: ${{ matrix.scenario.inputs.package-name }}
          to-opam-repository: ${{ matrix.scenario.inputs.to-opam-repository }}
          to-github-releases: ${{ matrix.scenario.inputs.to-github-releases }}
          changelog: ${{ matrix.scenario.inputs.changelog }}
          verbose: ${{ matrix.scenario.inputs.verbose }}
        continue-on-error: true

      - name: Validate outcome
        run: |
          echo "Action outcome: ${{ steps.test-action.outcome }}"
          echo "Expected success: ${{ matrix.scenario.expect-success }}"

          if [[ "${{ matrix.scenario.expect-success }}" == "true" ]]; then
            if [[ "${{ steps.test-action.outcome }}" != "success" ]]; then
              echo "❌ Expected success but got: ${{ steps.test-action.outcome }}"
              exit 1
            fi
            echo "✅ Action succeeded as expected"
          else
            if [[ "${{ steps.test-action.outcome }}" == "success" ]]; then
              echo "❌ Expected failure but action succeeded"
              exit 1
            fi
            echo "✅ Action failed as expected"
          fi

      - name: Validate outputs
        if: matrix.scenario.expect-outputs
        run: |
          echo "Checking outputs..."
          # Would check outputs here if they were set by the action
          echo "✅ Output validation (placeholder)"

      - name: Check error message
        if: matrix.scenario.expect-error && steps.test-action.outcome == 'failure'
        run: |
          echo "Checking for expected error keyword: ${{ matrix.scenario.expect-error }}"
          # In a real test, we'd capture and check the error output
          echo "✅ Error validation (placeholder)"

  # Test that action works with real dune-release
  smoke-test:
    name: Smoke Test with Real Tools
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build the action
        working-directory: .github/scripts/release
        run: |
          npm ci
          npm run package

      - uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.0

      - name: Install dune-release
        run: |
          opam install dune-release -y

      - name: Create test project
        run: |
          # Create valid opam file in the root (action runs from repo root)
          cat > test-pkg.opam << 'EOF'
          opam-version: "2.0"
          name: "test-pkg"
          version: "0.0.1"
          synopsis: "Test package"
          description: "A test package for CI"
          maintainer: "test@example.com"
          authors: "Test Author"
          license: "MIT"
          homepage: "https://github.com/test/test"
          bug-reports: "https://github.com/test/test/issues"
          depends: [
            "ocaml" {>= "4.08"}
            "dune" {>= "2.0"}
          ]
          build: [
            ["dune" "build" "-p" name "-j" jobs]
          ]
          EOF

          # Create dune-project
          cat > dune-project << 'EOF'
          (lang dune 2.0)
          (name test-pkg)
          EOF

          # Create changelog
          cat > CHANGES.md << 'EOF'
          ## 0.0.1

          - Initial test release
          EOF

          # Create a simple lib to make it a valid dune project
          mkdir -p lib
          cat > lib/dune << 'EOF'
          (library
           (name test_pkg)
           (public_name test-pkg))
          EOF

          cat > lib/test_pkg.ml << 'EOF'
          let hello = "world"
          EOF

          # Commit everything (action expects clean git state)
          git add .
          git commit -m "Test project for smoke test"
          git tag 0.0.1

          # Export GITHUB_REF for the action
          echo "GITHUB_REF=refs/tags/0.0.1" >> $GITHUB_ENV
          echo "GITHUB_REF_NAME=0.0.1" >> $GITHUB_ENV
          echo "GITHUB_REF_TYPE=tag" >> $GITHUB_ENV

      - name: Test action (dry-run)
        uses: ./.github/scripts/release
        with:
          package-name: test-pkg
          github-token: ${{ secrets.GITHUB_TOKEN }}
          to-opam-repository: false
          to-github-releases: false
          verbose: true

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, smoke-test]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary"
          echo ""
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Smoke Test: ${{ needs.smoke-test.result }}"

          if [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.smoke-test.result }}" != "success" ]]; then
            echo ""
            echo "❌ Some tests failed"
            exit 1
          fi

          echo ""
          echo "✅ All tests passed!"
