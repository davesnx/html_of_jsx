name: Test Release Action

on:
  pull_request:
    paths:
      - '.github/scripts/release/**'
      - '.github/workflows/test-release-action.yml'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        type: boolean
        default: false

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: .github/scripts/release
        run: npm ci

      - name: Run tests
        working-directory: .github/scripts/release
        run: npm test

  integration-tests:
    name: Integration test - ${{ matrix.scenario.name }}
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      fail-fast: false
      matrix:
        scenario:
          # Happy path scenarios
          - name: "valid-release"
            description: "Test successful release flow"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              echo 'version: "0.1.0"' >> test-package.opam
              echo 'depends: ["ocaml" "dune"]' >> test-package.opam
              mkdir -p .github/scripts/release
              echo '## 0.1.0' > CHANGES.md
              echo '- Initial release' >> CHANGES.md
            inputs:
              package-name: test-package
              changelog: test-env/CHANGES.md
              to-opam-repository: false
              to-github-releases: false
              verbose: true
            expect-success: true
            expect-outputs:
              - version: "0.1.0"

          - name: "dry-run"
            description: "Test dry-run mode (validation only)"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              echo '## 0.1.0' > CHANGES.md
              echo '- Test release' >> CHANGES.md
            inputs:
              package-name: test-package
              changelog: test-env/CHANGES.md
              to-opam-repository: false
              to-github-releases: false
            expect-success: true

          # Error scenarios
          - name: "missing-changelog"
            description: "Test with missing CHANGES.md"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              rm -f CHANGES.md
            inputs:
              package-name: test-package
              changelog: test-env/CHANGES.md
            expect-success: false
            expect-error: "changelog"

          - name: "invalid-opam"
            description: "Test with invalid opam file"
            setup: |
              echo 'invalid opam content' > test-package.opam
              echo '## 0.1.0' > CHANGES.md
              echo '- Release' >> CHANGES.md
            inputs:
              package-name: test-package
              changelog: test-env/CHANGES.md
              to-opam-repository: false
              to-github-releases: false
            expect-success: false
            expect-error: "opam"

          - name: "missing-version-in-changelog"
            description: "Test when version not in CHANGES.md"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              echo '# Changelog' > CHANGES.md
              echo 'No version entries here' >> CHANGES.md
            inputs:
              package-name: test-package
              changelog: test-env/CHANGES.md
              to-opam-repository: false
              to-github-releases: false
            expect-success: false
            expect-error: "version"

          - name: "custom-changelog-path"
            description: "Test with custom changelog file"
            setup: |
              echo 'opam-version: "2.0"' > test-package.opam
              echo 'name: "test-package"' >> test-package.opam
              echo '## 0.1.0' > NEWS.md
              echo '- Custom changelog' >> NEWS.md
            inputs:
              package-name: test-package
              changelog: test-env/NEWS.md
              to-opam-repository: false
              to-github-releases: false
            expect-success: true

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build the action
        working-directory: .github/scripts/release
        run: |
          npm ci
          npm run package

      - name: Create test environment
        run: |
          # Create a temporary test directory
          mkdir -p test-env
          cd test-env

          # Initialize git repo (needed for dune-release)
          git init
          git config user.name "Test User"
          git config user.email "test@example.com"

          # Run scenario setup
          ${{ matrix.scenario.setup }}

          # Create initial commit and tag (needed for release action)
          git add -A || true
          git commit -m "Initial test commit" || echo "No files to commit"
          git tag 0.1.0

          # Copy test files to repo root for the action to find
          cd ..
          cp -r test-env/*.opam . 2>/dev/null || true

          # Create a fake dune-release executable for testing
          mkdir -p .test-bin
          cat > .test-bin/dune-release << 'EOF'
          #!/bin/bash
          # Mock dune-release for testing
          case "$1" in
            lint)
              if [[ -f test-package.opam ]] && grep -q "opam-version" test-package.opam; then
                echo "Lint passed"
                exit 0
              else
                echo "Lint failed: invalid opam file"
                exit 1
              fi
              ;;
            distrib)
              echo "Creating distribution..."
              mkdir -p _build
              touch _build/test-package-0.1.0.tbz
              exit 0
              ;;
            *)
              echo "Mock dune-release: $@"
              exit 0
              ;;
          esac
          EOF
          chmod +x .test-bin/dune-release

          # Add mock to PATH
          echo "PATH=$PWD/.test-bin:$PATH" >> $GITHUB_ENV

      - name: Setup OCaml (mock)
        run: |
          # Create mock opam for testing
          cat > $PWD/.test-bin/opam << 'EOF'
          #!/bin/bash
          # Handle 'opam exec -- command args...'
          if [[ "$1" == "exec" ]] && [[ "$2" == "--" ]]; then
            shift 2  # Remove 'exec --'
            exec "$@"  # Execute the actual command
          else
            echo "Mock opam: $@"
            exit 0
          fi
          EOF
          chmod +x $PWD/.test-bin/opam

      - name: Run action
        id: test-action
        uses: ./.github/scripts/release
        with:
          github-token: ${{ github.token }}
          package-name: ${{ matrix.scenario.inputs.package-name }}
          to-opam-repository: ${{ matrix.scenario.inputs.to-opam-repository }}
          to-github-releases: ${{ matrix.scenario.inputs.to-github-releases }}
          changelog: ${{ matrix.scenario.inputs.changelog }}
          verbose: ${{ matrix.scenario.inputs.verbose }}
        env:
          TEST_OVERRIDE_GITHUB_REF: refs/tags/0.1.0
        continue-on-error: true

      - name: Validate outcome
        run: |
          echo "Action outcome: ${{ steps.test-action.outcome }}"
          echo "Expected success: ${{ matrix.scenario.expect-success }}"

          if [[ "${{ matrix.scenario.expect-success }}" == "true" ]]; then
            if [[ "${{ steps.test-action.outcome }}" != "success" ]]; then
              echo "❌ Expected success but got: ${{ steps.test-action.outcome }}"
              exit 1
            fi
            echo "✅ Action succeeded as expected"
          else
            if [[ "${{ steps.test-action.outcome }}" == "success" ]]; then
              echo "❌ Expected failure but action succeeded"
              exit 1
            fi
            echo "✅ Action failed as expected"
          fi

      - name: Validate outputs
        if: matrix.scenario.expect-outputs
        run: |
          echo "Checking outputs..."
          # Would check outputs here if they were set by the action
          echo "✅ Output validation (placeholder)"

      - name: Check error message
        if: matrix.scenario.expect-error && steps.test-action.outcome == 'failure'
        run: |
          echo "Checking for expected error keyword: ${{ matrix.scenario.expect-error }}"
          # In a real test, we'd capture and check the error output
          echo "✅ Error validation (placeholder)"
